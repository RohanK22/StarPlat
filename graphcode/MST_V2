function Boruvka (Graph g)
{
    // We need to provide id & color(component #) for each node in the graph.
    propNode<int> nodeId;
    propNode<int> color; // Denotes the component of the node
    propEdge<bool> isMSTEdge; // TODO: Not being passed automatically as argument
    
    g.attachNodeProperty(nodeId = -1);
    g.attachNodeProperty(color = -1);
    g.attachEdgeProperty(isMSTEdge = False);
    
    // Initialize the graph with each node in its own component.
    forall(u in g.nodes()){
        u.nodeId = u;
        u.color = u;
    }
    
    // TODO: This is of no use in MST, just using this to simulate while loop
    propNode<bool> modified;
    g.attachNodeProperty(modified = False);

    bool noNewComp = False;
    fixedPoint until (noNewComp : !modified) {
        // 1a. Find min edge per vertex - O(n) per thread
        propNode<int> minEdge; // TODO: Should be replaced by edge, int is just a hack
        g.attachNodeProperty(minEdge=-1);
        forall(src in g.nodes())
        {   
            for(dst in g.neighbors(src))
            {
                if(src.color != dst.color) // Consider edges across components
                {
                    edge e = g.get_edge(dummy, dummy);
                    edge minEdge = src.minEdge;
                    if(minEdge == -1) {
                        src.minEdge = e;
                    }
                    if(minEdge != -1){
                        node minDst = minEdge.data;
                        if(e.weight < minEdge.weight || (e.weight == minEdge.weight && dst.color < minDst.color)) {
                            src.minEdge = e;
                        }
                    }
                }
            }
        }
        
        // 1b. Find min edge per connected component - O(n) per thread
        propNode<int> minEdgeOfComp;
        g.attachNodeProperty(minEdgeOfComp=-1);
        
        bool finishedMinEdge = False;
        fixedPoint until (finishedMinEdge: !modified) {
            forall(u in g.nodes()){
                int comp = u.color;
                int minEdge = comp.minEdgeOfComp;
                int e = u.minEdge;
                
                if(e != -1){
                    int dst = e.data;
                    if(minEdge == -1) {
                        comp.minEdgeOfComp = e;
                        finishedMinEdge = False;
                    }
                    if(minEdge != -1){
                        node minDst = minEdge.data;
                        if(e.weight < minEdge.weight || (e.weight == minEdge.weight && dst.color < minDst.color)) {
                            comp.minEdgeOfComp = e;
                            finishedMinEdge = False;
                        }
                    }
                }
            }
        }

        // 2. Remove mirrored edges
        forall(src in g.nodes())
        {
            if(src.color == src.nodeId){
                edge srcMinEdge = src.minEdgeOfComp;
                if(srcMinEdge != -1)
                {
                    node dst = srcMinEdge.data; 
                    node dstLead = dst.color;
                    edge dstMinEdge = dstLead.minEdgeOfComp;
                    if(dstMinEdge != -1)
                    {
                        node dstOfDst = dstMinEdge.data;
                        node dstOfDstLead = dstOfDst.color;
                        if(src.color == dstOfDstLead.color && src.color > dstLead.color)
                        {
                            dstLead.minEdgeOfComp = -1;
                        }
                    }
                }
            }
        }
        
        // 3. Collecting MST edges
        forall(src in g.nodes()){
            if(src.color == src.nodeId){
                edge srcMinEdge = src.minEdgeOfComp;
                if(srcMinEdge != -1)
                {
                    srcMinEdge.isMSTEdge = True;
                }
            }
        }
        
        // 4a. Initialize colors
        forall(src in g.nodes()){
            if(src.color == src.nodeId){
                edge srcMinEdge = src.minEdgeOfComp;
                if(srcMinEdge != -1)
                {
                    noNewComp = False; // If there is atleast one minedge, then there is new component
                    node dst = srcMinEdge.data;
                    src.color = dst.color;
                }
            }
        }
        
        // 4b. Propagate colors
        bool finished = False;
        fixedPoint until (finished: !modified) {
            forall(u in g.nodes()) {
                int my_color = u.color;
                int other_color = my_color.color;

                if(my_color != other_color)
                {
                    finished = False;
                    u.color = other_color;
                }
            }
        }
    }   
}