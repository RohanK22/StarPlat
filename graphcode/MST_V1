function Boruvka (Graph g)
{
    // We need to provide id & color(component #) for each node in the graph.
    propNode<int> nodeId;
    propNode<int> color; // Denotes the component of the node
    propEdge<bool> isMSTEdge;
    
    g.attachNodeProperty(nodeId = -1);
    g.attachNodeProperty(color = -1);
    g.attachEdgeProperty(isMSTEdge = False);
    
    // Initialize the graph with each node in its own component.
    forall(u in g.nodes()){
        int i = 0;
        for(v in g.nodes()){
            v.nodeId = i;
            v.color = i;
            i = i + 1;
        }
    }
    
    // TODO: This is of no use in MST, just using this to simulate while loop
    propNode<bool> modified;
    g.attachNodeProperty(modified = False);

    bool noNewComp = False;
    fixedPoint until (noNewComp : !modified) {
        // 1a. Find min edge per vertex - O(n) per thread
        propNode<int> minEdge; // TODO: Should be replaced by edge, int is just a hack
        g.attachNodeProperty(minEdge=-1);
        forall(src in g.nodes())
        {   
            for(dst in g.neighbors(src))
            {
                if(src.color != dst.color) // Consider edges across components
                {
                    edge e = g.get_edge(dummy, dummy);
                    edge minEdge = src.minEdge;
                    if(minEdge == -1) {
                        src.minEdge = e;
                    }
                    if(minEdge != -1){
                        node minDst = minEdge.data;
                        if(e.weight < minEdge.weight || (e.weight == minEdge.weight && dst.color < minDst.color)) {
                            src.minEdge = e;
                        }
                    }
                }
            }
        }
        
        // 1b. Find min edge per connected component - O(n) per thread
        propNode<int> minEdgeOfComp;
        g.attachNodeProperty(minEdgeOfComp=-1);
        forall(src in g.nodes())
        {
            if(src.color == src.nodeId){
                for(nbr in g.nodes().filter(color == src.color))
                {
                    edge minEdgeNbr = nbr.minEdge;
                    edge minEdgeOfComp = src.minEdgeOfComp;
                    if(minEdgeNbr != -1 && minEdgeOfComp == -1){
                        src.minEdgeOfComp = minEdgeNbr;
                    }
                    if(minEdgeNbr != -1 && minEdgeOfComp != -1){
                        node minDst = minEdgeOfComp.data;
                        node dst = minEdgeNbr.data;
                        if(minEdgeNbr.weight < minEdgeOfComp.weight || (minEdgeNbr.weight == minEdgeOfComp.weight && dst.color < minDst.color)){
                            src.minEdgeOfComp = minEdgeNbr;
                        }
                    }
                }
            }
        }

        // 2. Remove mirrored edges
        forall(src in g.nodes())
        {
            if(src.color == src.nodeId){
                edge srcMinEdge = src.minEdgeOfComp;
                if(srcMinEdge != -1)
                {
                    node dst = srcMinEdge.data; 
                    node dstLead = dst.color;
                    edge dstMinEdge = dstLead.minEdgeOfComp;
                    if(dstMinEdge != -1)
                    {
                        node dstOfDst = dstMinEdge.data;
                        node dstOfDstLead = dstOfDst.color;
                        if(src.color == dstOfDstLead.color && src.color > dstLead.color)
                        {
                            dstLead.minEdgeOfComp = -1;
                        }
                    }
                }
            }
        }
        
        // 3. Collecting MST edges
        forall(src in g.nodes()){
            if(src.color == src.nodeId){
                edge srcMinEdge = src.minEdgeOfComp;
                if(srcMinEdge != -1)
                {
                    srcMinEdge.isMSTEdge = True;
                }
            }
        }

        // 4a. Propagating colors to only union-leaders
        bool finished = False;
        fixedPoint until (finished: !modified) {
            forall(u in g.nodes()) {
                if(u.color == u.nodeId){
                    edge minEdgeOfComp = u.minEdgeOfComp;
                    if(minEdgeOfComp != -1) {
                        node minDst = minEdgeOfComp.data;
                        u.color = minDst.color;
                        finished = False;
                        noNewComp = False;
                    }
                }
            }
        }

        // 4b. Propagating colors to all other nodes thru leaders
        forall(u in g.nodes()) {
            int lead = u.color;
            if(lead.color != u.color) {
                u.color = lead.color;
            }
        }
    }   
}