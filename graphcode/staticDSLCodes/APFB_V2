function APFB (Graph g, int nc) {
    propNode<int> rmatch;
    propNode<int> cmatch;
    propNode<int> bfsArray;
    propNode<int> predecessor;
    propNode<bool> compress;
    propNode<bool> compress_next;

    bool noNewPaths = False;
    bool noNewVertices = False;
    bool compressed = False;

    propNode<bool> modifiedNoNewPaths;
    propNode<bool> modifiedNoNewPaths_next;
    propNode<bool> modifiedNoNewVertices;
    propNode<bool> modifiedNoNewVertices_next;
    propNode<bool> modifiedCompressed;
    propNode<bool> modifiedCompressed_next;

    g.attachNodeProperty(rmatch = -1, cmatch = -1, modifiedNoNewPaths = False, modifiedNoNewPaths_next = False, modifiedNoNewVertices = False, modifiedNoNewVertices_next = False, modifiedCompressed = False, modifiedCompressed_next = False);


    fixedPoint until(noNewPaths : !modifiedNoNewPaths) {
        int L0 = 0;
        int NOT_VISITED = L0 - 1;
        g.attachNodeProperty(bfsArray = NOT_VISITED);

        forall(c in g.nodes()) {
            if(c < nc) {
                if(c.cmatch == -1) {
                    c.bfsArray = L0;
                }
            }
        }
        g.attachNodeProperty(predecessor = -1);

        int bfsLevel = L0;
        noNewVertices = False;
        
        fixedPoint until(noNewVertices : !modifiedNoNewVertices) {
            forall(col_vertex in g.nodes()) {
                if(col_vertex < nc) {
                    if(col_vertex.bfsArray == bfsLevel) {
                        for(neigh_row in g.neighbors(col_vertex)) {
                            if(neigh_row >= nc) {
                                int col_match = neigh_row.rmatch;
                                if(col_match > -1) {
                                    if(col_match.bfsArray == NOT_VISITED) {
                                        //noNewVertices = False;
                                        neigh_row.modifiedNoNewVertices_next = True;
                                        col_match.bfsArray = bfsLevel + 1;
                                        neigh_row.predecessor = col_vertex;
                                    }
                                }
                                if(col_match == -1) { 
                                    neigh_row.rmatch = -2;
                                    neigh_row.predecessor = col_vertex;
                                    // noNewPaths = False;
                                    neigh_row.modifiedNoNewPaths_next = True;

                                }
                            }
                        }
                    }
                }
            }
            bfsLevel = bfsLevel + 1;

            modifiedNoNewVertices = modifiedNoNewVertices_next;
            g.attachNodeProperty(modifiedNoNewVertices_next = False);
        }

        g.attachNodeProperty(compress = False);
        g.attachNodeProperty(compress_next = False);

        forall(r in g.nodes()) {
            if(r >= nc && r.rmatch == -2) {
                r.compress = True;
            }
        }

        compressed = False;
        

        fixedPoint until(compressed : !modifiedCompressed) {
            forall(row_vertex in g.nodes().filter(compress == True)) {
                if(row_vertex >= nc) {
                    int matched_col = row_vertex.predecessor;
                    int matched_row = matched_col.cmatch;

                    bool isValid = True;
                    if(matched_row != -1) {
                        if(matched_row.predecessor == matched_col) {
                            isValid = False;
                        }
                    }

                    if(isValid) {
                        matched_col.cmatch = row_vertex;
                        row_vertex.rmatch = matched_col;
                        if(matched_row != -1) {
                            matched_row.compress_next = True;
                            // compressed = False;
                            matched_row.modifiedCompressed_next = True;
                        }
                    }
                }
            }

            forall(row_vertex in g.nodes()) {
                if(row_vertex >= nc) {
                    row_vertex.compress = row_vertex.compress_next;
                    row_vertex.compress_next = False;
                }
            }

            
            modifiedCompressed = modifiedCompressed_next;
            g.attachNodeProperty(modifiedCompressed_next = False);
        }

        forall(r in g.nodes()) {
                if(r >= nc) {
                    int c = r.rmatch;
                    if(c >= 0) {
                        if(c.cmatch != r) {
                            r.rmatch = -1;
                        }
                    }

                    if(c == -2) {
                        r.rmatch = -1;
                    }
                }
            }

        modifiedNoNewPaths = modifiedNoNewPaths_next;
        g.attachNodeProperty(modifiedNoNewPaths_next = False);

    }
}