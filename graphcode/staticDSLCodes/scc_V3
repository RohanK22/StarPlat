// Algorithm : vHong DSL implementation (Paper : GPU Centric Extensions for Parallel Strongly Connected Components Computation, Rupesh et al, 2017)
// For vertex-v, v.src=-1 indicates whether its SCC not found yet.
// v.range => sub-graph id or color of that vertex-v
// v.pivotField => array used to collect set of pivots 
// v.isPivot => indicates whether that vertex is pivot or not. 
// For every SCC, there exist a pivot from which we discovered that SCC. Therefore, counting no.of pivots gives count for SCC.

// Major differences from version 1 : 1. computation of weakly connected components and 2. polling multiple pivots from each weakly connected components
function vHong(Graph g) {
    propNode<int> modified;
    propNode<int> outDeg; propNode<int> inDeg;
    propNode<bool> visitFw; propNode<bool> visitBw;
    propNode<bool> propFw; propNode<bool> propBw;
    propNode<bool> isPivot;
    propNode<int> scc;
    propNode<int> range;
    propNode<int> pivotField; 
    // propNode<int> pivotFieldValue;

    g.attachNodeProperty(modified = False);
    g.attachNodeProperty(outDeg = 0, inDeg = 0);
    g.attachNodeProperty(visitFw = False, visitBw = False);
    g.attachNodeProperty(propFw = False, propBw = False);

    g.attachNodeProperty(isPivot = False);
    g.attachNodeProperty(scc = -1);
    g.attachNodeProperty(range = 0);
    g.attachNodeProperty(pivotField = -1);
    // g.attachNodeProperty(pivotFieldValue = 0);
    // Fix this initialization problem to avoid oldSrc to be -1 and ....
    // OutDeg * InDeg overflow
    // 3 * id overflow
    
    //0. Finding in and out degree of each vertex
    forall(src in g.nodes()) {
        int nxtSrc = src + 1;
        src.inDeg += nxtSrc.rev_meta - src.rev_meta;
        src.outDeg += nxtSrc.meta - src.meta;
    }
    
    
    //1. Trimming 
    bool fpoint1 = False;
    fixedPoint until (fpoint1: !modified) {
        forall(src in g.nodes().filter(scc == -1)) {
            int havePar = 0; int haveChild = 0;
            for(par in g.nodes_to(src).filter(scc == -1)) {
                if(par.range == src.range) {
                    havePar = 1;
                }
            }
            for(dst in g.neighbors(src).filter(scc == -1)) {
                if(dst.range == src.range) {
                    haveChild = 1;
                }
            }
            if((havePar == 0) || (haveChild == 0)) {
                src.scc = src;
                src.isPivot = True;
                fpoint1 = False;
            }
        }
    }

    // pollFirstPivot [Note : range value of all vertices are equal to zero => all poll for single pivot]
    forall(src in g.nodes().filter(scc == -1)) {
        int color = src.range;
        int index = (color) - (color/V)*V;
        int oldSrcValue = -1; 
        int oldSrc = index.pivotField;
        if(oldSrc >= 0) {oldSrcValue = oldSrc.inDeg + oldSrc.outDeg;}
        if(oldSrcValue < (src.inDeg + src.outDeg)) {
            index.pivotField = src;
        }
    }

    // Select Pivot
    forall(src in g.nodes().filter(scc == -1)) {
        int color = src.range;
        int index = (color) - (color/V)*V;
        if(index.pivotField == src) {
            src.visitFw = True;
            src.visitBw = True;
            src.isPivot = True;
        }
    }

    // Forward - Backward visit
    bool fpoint2 = False;
    fixedPoint until (fpoint2 : !modified) {
        forall(src in g.nodes().filter(scc == -1)) {
            int myrange = src.range;

            // Forward closure
            if(src.propFw == False && src.visitFw == True) {
                for(dst in g.neighbors(src).filter(scc == -1)) {
                    if(dst.visitFw == False && dst.range == myrange) {
                        dst.visitFw = True;
                        fpoint2 = False;
                    }
                }
                src.propFw = True;
            }

            // Backward closure
            if(src.propBw == False && src.visitBw == True) {
                for(par in g.nodes_to(src).filter(scc == -1)) {
                    if(par.visitBw == False && par.range == myrange) {
                        par.visitBw = True;
                        fpoint2 = False;
                    }
                }
                src.propBw = True;
            }            
        }
    }

    // update SCC
    forall(src in g.nodes().filter(scc == -1)) {
        if(src.visitFw == False || src.visitBw == False) {
            // main loop point
            fpoint5 = False;
            int ext = 0;
            if(src.visitFw == False && src.visitBw == True) {ext = 1;}
            if(src.visitFw == False && src.visitBw == False) {ext = 2;}
            int newRange = 3 * src.range + ext;
            newRange = (newRange) - (newRange/V)*V;
            src.range = newRange;
            src.visitFw = False;
            src.visitBw = False;
            src.propFw = False;
            src.propBw = False;
        }
        if(src.visitFw == True && src.visitBw == True) {
            src.scc = src;
        }
    }

    // Again Trimming
    fpoint1 = False;
    fixedPoint until (fpoint1: !modified) {
        forall(src in g.nodes().filter(scc == -1)) {
            int havePar = 0; int haveChild = 0;
            for(par in g.nodes_to(src).filter(scc == -1)) {
                if(par.range == src.range) {
                    havePar = 1;
                }
            }
            for(dst in g.neighbors(src).filter(scc == -1)) {
                if(dst.range == src.range) {
                    haveChild = 1;
                }
            }
            if((havePar == 0) || (haveChild == 0)) {
                src.scc = src;
                src.isPivot = True;
                fpoint1 = False;
            }
        }
    }

    //=======================================     Propagate / WCC decomposition ============================================//
    // Range initialization
    g.attachNodeProperty(range = 0);
    forall(src in g.nodes()) {
        src.range += src;
    }


    bool fpoint4 = False;
    fixedPoint until (fpoint4 : !modified) {
        // Weakly connected components propagate 1
        forall(src in g.nodes().filter(scc == -1)) {
            for(dst in g.neighbors(src).filter(scc == -1)) {
                if(dst.range > src.range) {
                    dst.range = src.range;
                    fpoint4 = False;
                }
            }
            for(dst in g.nodes_to(src).filter(scc == -1)) {
                if(dst.range > src.range) {
                    dst.range = src.range;
                    fpoint4 = False;
                }
            }
        }
    }

    //=======================================     Main procedure iterations ============================================//
    bool fpoint5 = False;
    fixedPoint until (fpoint5 : !modified) {
        // pollForPivots
        forall(src in g.nodes().filter(scc == -1)) {
            int color = src.range;
            int index = (color) - (color/V)*V;
            int oldSrcValue = -1; 
            int oldSrc = index.pivotField;
            if(oldSrc >= 0) {oldSrcValue = oldSrc.inDeg + oldSrc.outDeg;}
            if(oldSrcValue < (src.inDeg + src.outDeg)) {
                index.pivotField = src;
            }
        }

        // Select Pivot
        forall(src in g.nodes().filter(scc == -1)) {
            int color = src.range;
            int index = (color) - (color/V)*V;
            if(index.pivotField == src) {
                src.visitFw = True;
                src.visitBw = True;
                src.isPivot = True;
            }
        }

        fpoint2 = False;
        fixedPoint until (fpoint2 : !modified) {
            forall(src in g.nodes().filter(scc == -1)) {
                int myrange = src.range;

                // Forward closure
                if(src.propFw == False && src.visitFw == True) {
                    for(dst in g.neighbors(src).filter(scc == -1)) {
                        if(dst.visitFw == False && dst.range == myrange) {
                            dst.visitFw = True;
                            fpoint2 = False;
                        }
                    }
                    src.propFw = True;
                }

                // Backward closure
                if(src.propBw == False && src.visitBw == True) {
                    for(par in g.nodes_to(src).filter(scc == -1)) {
                        if(par.visitBw == False && par.range == myrange) {
                            par.visitBw = True;
                            fpoint2 = False;
                        }
                    }
                    src.propBw = True;
                }            
            }
        }

        // update
        forall(src in g.nodes().filter(scc == -1)) {
            if(src.visitFw == False || src.visitBw == False) {
                // main loop point
                fpoint5 = False;
                int ext = 0;
                if(src.visitFw == False && src.visitBw == True) {ext = 1;}
                if(src.visitFw == False && src.visitBw == False) {ext = 2;}
                int newRange = 3 * src.range + ext;
                newRange = (newRange) - (newRange/V)*V;
                src.range = newRange;
                src.visitFw = False;
                src.visitBw = False;
                src.propFw = False;
                src.propBw = False;
            }
            if(src.visitFw == True && src.visitBw == True) {
                src.scc = src;
            }
        } // END of update

    } // End of main while loop
}
